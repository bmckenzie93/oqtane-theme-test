#pragma checksum "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Themes/Controls/ControlPanel.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f0785c6c67c78766e2d950cb2608cfccd907c995"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Themes.Controls
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class ControlPanel : ThemeControlBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 223 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Themes/Controls/ControlPanel.razor"
      

    private bool _deleteConfirmation = false;
    private List<string> _categories = new List<string>();
    private List<ModuleDefinition> _allModuleDefinitions;
    private List<ModuleDefinition> _moduleDefinitions;
    private List<Page> _pages = new List<Page>();
    private List<Module> _modules = new List<Module>();
    private List<ThemeControl> _containers = new List<ThemeControl>();
    private string _display = "display: none;";
    private string _category = "Common";

    protected string PageId { get; private set; } = "-";
    protected string ModuleId { get; private set; } = "-";
    protected string ModuleType { get; private set; } = "new";
    protected string ModuleDefinitionName { get; private set; } = "-";

    protected string Category
    {
        get => _category;
        private set
        {
            if (_category != value)
            {
                _category = value;
                _moduleDefinitions = _allModuleDefinitions.Where(item => item.Categories.Contains(Category)).ToList();
                ModuleDefinitionName = "-";
                Description = "";
                StateHasChanged();
                _ = UpdateSettingsAsync();
            }
        }
    }

    protected string Pane
    {
        get => _pane;
        private set
        {
            if (_pane != value)
            {
                _pane = value;
                _ = UpdateSettingsAsync();
            }
        }
    }


    protected string Description { get; private set; } = "";

    protected string Title { get; private set; } = "";
    protected string ContainerType { get; private set; } = "";
    protected string Message { get; private set; } = "";

    [Parameter]
    public string ButtonClass { get; set; } = "btn-outline-secondary";

    [Parameter]
    public string CardClass { get; set; } = "card border-secondary mb-3";

    [Parameter]
    public string HeaderClass { get; set; } = "card-header";

    [Parameter]
    public string BodyClass { get; set; } = "card-body";


    protected override async Task OnInitializedAsync()
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            _pages?.Clear();

            foreach (Page p in PageState.Pages)
            {
                if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.View, p.Permissions))
                {
                    _pages.Add(p);
                }
            }
            await LoadSettingsAsync();

            var themes = await ThemeService.GetThemesAsync();
            _containers = ThemeService.GetContainerControls(themes, PageState.Page.ThemeType);
            ContainerType = PageState.Site.DefaultContainerType;
            _allModuleDefinitions = await ModuleDefinitionService.GetModuleDefinitionsAsync(PageState.Site.SiteId);
            _moduleDefinitions = _allModuleDefinitions.Where(item => item.Categories.Contains(Category)).ToList();
            _categories = _allModuleDefinitions.SelectMany(m => m.Categories.Split(',')).Distinct().ToList();
        }
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        Category = (string) e.Value;
    }

    private void ModuleChanged(ChangeEventArgs e)
    {
        ModuleDefinitionName = (string) e.Value;
        if (ModuleDefinitionName != "-")
        {
            var moduleDefinition = _moduleDefinitions.FirstOrDefault(item => item.ModuleDefinitionName == ModuleDefinitionName);
            Description = "<br /><div class=\"alert alert-info\" role=\"alert\">" + moduleDefinition.Description + "</div>";
        }
        else
        {
            Description = "";
        }

        StateHasChanged();
    }

    private void PageChanged(ChangeEventArgs e)
    {
        PageId = (string) e.Value;
        if (PageId != "-")
        {
            _modules = PageState.Modules
                .Where(module => module.PageId == int.Parse(PageId)
                                 && !module.IsDeleted
                                 && UserSecurity.IsAuthorized(PageState.User, PermissionNames.View, module.Permissions))
                .ToList();
        }
        ModuleId = "-";
        StateHasChanged();
    }

    private async Task AddModule()
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            if ((ModuleType == "new" && ModuleDefinitionName != "-") || (ModuleType != "new" && ModuleId != "-"))
            {
                if (ModuleType == "new")
                {
                    Module module = new Module();
                    module.SiteId = PageState.Site.SiteId;
                    module.PageId = PageState.Page.PageId;
                    module.ModuleDefinitionName = ModuleDefinitionName;
                    module.AllPages = false;
                    module.Permissions = PageState.Page.Permissions;
                    module = await ModuleService.AddModuleAsync(module);
                    ModuleId = module.ModuleId.ToString();
                }

                var pageModule = new PageModule
                {
                    PageId = PageState.Page.PageId,
                    ModuleId = int.Parse(ModuleId),
                    Title = Title
                };
                if (pageModule.Title == "")
                {
                    if (ModuleType == "new")
                    {
                        pageModule.Title = _moduleDefinitions.FirstOrDefault(item => item.ModuleDefinitionName == ModuleDefinitionName)?.Name;
                    }
                    else
                    {
                        pageModule.Title = _modules.FirstOrDefault(item => item.ModuleId == int.Parse(ModuleId))?.Title;
                    }
                }

                pageModule.Pane = Pane;
                pageModule.Order = int.MaxValue;
                pageModule.ContainerType = ContainerType;

                if (pageModule.ContainerType == PageState.Site.DefaultContainerType)
                {
                    pageModule.ContainerType = "";
                }

                await PageModuleService.AddPageModuleAsync(pageModule);
                await PageModuleService.UpdatePageModuleOrderAsync(pageModule.PageId, pageModule.Pane);

                Message = "<br /><div class=\"alert alert-success\" role=\"alert\">Module Added To Page</div>";
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                Message = "<br /><div class=\"alert alert-warning\" role=\"alert\">You Must Select A Module</div>";
            }
        }
        else
        {
            Message = "<br /><div class=\"alert alert-error\" role=\"alert\">Not Authorized</div>";
        }
    }

    private async Task ToggleEditMode(bool EditMode)
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            if (EditMode)
            {
                PageState.EditMode = false;
            }
            else
            {
                PageState.EditMode = true;
            }

            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "edit=" + ((PageState.EditMode) ? "1" : "0")));
        }
        else
        {
            if (PageState.Page.IsPersonalizable && PageState.User != null)
            {
                await PageService.AddPageAsync(PageState.Page.PageId, PageState.User.UserId);
                PageState.EditMode = true;
                NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "edit=" + ((PageState.EditMode) ? "1" : "0")));
            }
        }
    }

    private void ShowControlPanel()
    {
        Message = "";
        _display = "width: 25%; min-width: 375px;";
        StateHasChanged();
    }

    private void HideControlPanel()
    {
        Message = "";
        _display = "width: 0%;";
        StateHasChanged();
    }

    private void Navigate(string location)
    {
        HideControlPanel();
        Module module;
        switch (location)
        {
            case "Admin":
                // get admin dashboard moduleid
                module = PageState.Modules.FirstOrDefault(item => item.ModuleDefinitionName == Constants.AdminDashboardModule);

                if (module != null)
                {
                    NavigationManager.NavigateTo(EditUrl(PageState.Page.Path, module.ModuleId, "Index", ""));
                }

                break;
            case "Add":
            case "Edit":
                string url = "";
                // get page management moduleid
                module = PageState.Modules.FirstOrDefault(item => item.ModuleDefinitionName == Constants.PageManagementModule);

                if (module != null)
                {
                    switch (location)
                    {
                        case "Add":
                            url = EditUrl(PageState.Page.Path, module.ModuleId, location, "");
                            break;
                        case "Edit":
                            url = EditUrl(PageState.Page.Path, module.ModuleId, location, "id=" + PageState.Page.PageId.ToString());
                            break;
                    }
                }

                if (url != "")
                {
                    NavigationManager.NavigateTo(url);
                }

                break;
        }
    }

    private async void Publish(string action)
    {
        if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.Permissions))
        {
            List<PermissionString> permissions;

            if (action == "publish")
            {
                // publish all modules
                foreach (var module in PageState.Modules.Where(item => item.PageId == PageState.Page.PageId))
                {
                    permissions = UserSecurity.GetPermissionStrings(module.Permissions);
                    foreach (var permissionstring in permissions)
                    {
                        if (permissionstring.PermissionName == PermissionNames.View)
                        {
                            List<string> ids = permissionstring.Permissions.Split(';').ToList();
                            if (!ids.Contains(Constants.AllUsersRole)) ids.Add(Constants.AllUsersRole);
                            if (!ids.Contains(Constants.RegisteredRole)) ids.Add(Constants.RegisteredRole);
                            permissionstring.Permissions = string.Join(";", ids.ToArray());
                        }
                    }
                    module.Permissions = UserSecurity.SetPermissionStrings(permissions);
                    await ModuleService.UpdateModuleAsync(module);
                }
            }

            // publish page
            var page = PageState.Page;
            permissions = UserSecurity.GetPermissionStrings(page.Permissions);
            foreach (var permissionstring in permissions)
            {
                if (permissionstring.PermissionName == PermissionNames.View)
                {
                    List<string> ids = permissionstring.Permissions.Split(';').ToList();
                    switch (action)
                    {
                        case "publish":
                            if (!ids.Contains(Constants.AllUsersRole)) ids.Add(Constants.AllUsersRole);
                            if (!ids.Contains(Constants.RegisteredRole)) ids.Add(Constants.RegisteredRole);
                            break;
                        case "unpublish":
                            ids.Remove(Constants.AllUsersRole);
                            ids.Remove(Constants.RegisteredRole);
                            break;
                    }
                    permissionstring.Permissions = string.Join(";", ids.ToArray());
                }
            }
            page.Permissions = UserSecurity.SetPermissionStrings(permissions);
            await PageService.UpdatePageAsync(page);
            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "reload"));
        }
    }

    private void ConfirmDelete()
    {
        _deleteConfirmation = !_deleteConfirmation;
        StateHasChanged();
    }

    private async Task DeletePage()
    {
        ConfirmDelete();

        var page = PageState.Page;
        try
        {
            if (page.UserId == null)
            {
                page.IsDeleted = true;
                await PageService.UpdatePageAsync(page);
                await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, null, "Page Deleted {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl(""));
            }
            else // personalized page
            {
                await PageService.DeletePageAsync(page.PageId);
                await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, null, "Page Deleted {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl());
            }
        }
        catch (Exception ex)
        {
            await logger.Log(page.PageId, null, PageState.User.UserId, GetType().AssemblyQualifiedName, "ControlPanel", LogFunction.Delete, LogLevel.Information, ex, "Page Deleted {Page} {Error}", page, ex.Message);
        }
    }

    private string settingCategory = "CP-category";
    private string settingPane = "CP-pane";
    private string _pane = "";

    private async Task LoadSettingsAsync()
    {
        Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
        _category = SettingService.GetSetting(settings, settingCategory, "Common");
        var pane = SettingService.GetSetting(settings, settingPane, "");
        _pane = PageState.Page.Panes.Contains(pane) ? pane : PageState.Page.Panes.FirstOrDefault();
    }

    private async Task UpdateSettingsAsync()
    {
        Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
        SettingService.SetSetting(settings, settingCategory, _category);
        SettingService.SetSetting(settings, settingPane, _pane);
        await SettingService.UpdateUserSettingsAsync(settings, PageState.User.UserId);
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISettingService SettingService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogService logger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPageModuleService PageModuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPageService PageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModuleService ModuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IThemeService ThemeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModuleDefinitionService ModuleDefinitionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserService UserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
