#pragma checksum "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Modules/Settings.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a08c28e3846c22430373dd098b906ac29cf388c5"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Modules.Admin.Modules
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class Settings : ModuleBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 87 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Modules/Settings.razor"
       
    private List<ThemeControl> _containers = new List<ThemeControl>();
    private string _title;
    private string _containerType;
    private string _allPages = "false";
    private string _permissionNames = "";
    private string _permissions = null;
    private string _pageId;
    private PermissionGrid _permissionGrid;
    private Type _settingsModuleType;
    private string _settingstitle = "Other Settings";
    private object _settings;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;
    public override string Title => "Module Settings";

    private RenderFragment DynamicComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _title = ModuleState.Title;
        _containers = ThemeService.GetContainerControls(await ThemeService.GetThemesAsync(), PageState.Page.ThemeType);
        _containerType = ModuleState.ContainerType;
        if (!string.IsNullOrEmpty(PageState.Page.DefaultContainerType) && _containerType == PageState.Page.DefaultContainerType)
        {
            _containerType = "-";
        }
        if (_containerType == PageState.Site.DefaultContainerType)
        {
            _containerType = "-";
        }
        _allPages = ModuleState.AllPages.ToString();
        _permissions = ModuleState.Permissions;
        _permissionNames = ModuleState.ModuleDefinition.PermissionNames;
        _pageId = ModuleState.PageId.ToString();

        _settingsModuleType = Type.GetType(ModuleState.ModuleType);
        if (_settingsModuleType != null)
        {
            var moduleobject = Activator.CreateInstance(_settingsModuleType) as IModuleControl;
            _settingstitle = moduleobject.Title;
            if (string.IsNullOrEmpty(_settingstitle))
            {
                _settingstitle = "Other Settings";
            }

            DynamicComponent = builder =>
            {
                builder.OpenComponent(0, _settingsModuleType);
                builder.AddComponentReferenceCapture(1, inst => { _settings = Convert.ChangeType(inst, _settingsModuleType); });
                builder.CloseComponent();
            };
        }
    }

    private async Task SaveModule()
    {
        var pagemodule = await PageModuleService.GetPageModuleAsync(ModuleState.PageModuleId);
        pagemodule.PageId = int.Parse(_pageId);
        pagemodule.Title = _title;
        pagemodule.ContainerType = (_containerType != "-") ? _containerType : string.Empty;
        if (!string.IsNullOrEmpty(pagemodule.ContainerType) && pagemodule.ContainerType == PageState.Page.DefaultContainerType)
        {
            pagemodule.ContainerType = string.Empty;
        }
        if (!string.IsNullOrEmpty(pagemodule.ContainerType) && pagemodule.ContainerType == PageState.Site.DefaultContainerType)
        {
            pagemodule.ContainerType = string.Empty;
        }
        await PageModuleService.UpdatePageModuleAsync(pagemodule);
        await PageModuleService.UpdatePageModuleOrderAsync(pagemodule.PageId, pagemodule.Pane);

        var module = ModuleState;
        module.AllPages = bool.Parse(_allPages);
        module.Permissions = _permissionGrid.GetPermissions();
        await ModuleService.UpdateModuleAsync(module);

        if (_settingsModuleType != null)
        {
            var moduleType = Type.GetType(ModuleState.ModuleType);
            if (moduleType != null)
            {
                moduleType.GetMethod("UpdateSettings")?.Invoke(_settings, null); // method must be public in settings component
            }
        }

        NavigationManager.NavigateTo(NavigateUrl());
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPageModuleService PageModuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModuleService ModuleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IThemeService ThemeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
