#pragma checksum "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Profiles/Edit.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6ef659d9f74107e1564c029af1b9584cc8da895a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Modules.Admin.Profiles
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class Edit : ModuleBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 89 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Profiles/Edit.razor"
       
    private int _profileid = -1;
    private string _name = string.Empty;
    private string _title = string.Empty;
    private string _description = string.Empty;
    private string _category = string.Empty;
    private string _vieworder = "0";
    private string _maxlength = "0";
    private string _defaultvalue = string.Empty;
    private string _isrequired = "False";
    private string _isprivate = "False";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    public override string Actions => "Add,Edit";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("id"))
            {
                _profileid = Int32.Parse(PageState.QueryString["id"]);
                var profile = await ProfileService.GetProfileAsync(_profileid);
                if (profile != null)
                {
                    _name = profile.Name;
                    _title = profile.Title;
                    _description = profile.Description;
                    _category = profile.Category;
                    _vieworder = profile.ViewOrder.ToString();
                    _maxlength = profile.MaxLength.ToString();
                    _defaultvalue = profile.DefaultValue;
                    _isrequired = profile.IsRequired.ToString();
                    _isprivate = profile.IsPrivate.ToString();
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Profile {ProfileId} {Error}", _profileid, ex.Message);
            AddModuleMessage("Error Loading Profile", MessageType.Error);
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            Profile profile;
            if (_profileid != -1)
            {
                profile = await ProfileService.GetProfileAsync(_profileid);
            }
            else
            {
                profile = new Profile();
            }

            profile.SiteId = PageState.Site.SiteId;
            profile.Name = _name;
            profile.Title = _title;
            profile.Description = _description;
            profile.Category = _category;
            profile.ViewOrder = int.Parse(_vieworder);
            profile.MaxLength = int.Parse(_maxlength);
            profile.DefaultValue = _defaultvalue;
            profile.IsRequired = (_isrequired == null ? false : Boolean.Parse(_isrequired));
            profile.IsPrivate = (_isprivate == null ? false : Boolean.Parse(_isprivate));
            if (_profileid != -1)
            {
                profile = await ProfileService.UpdateProfileAsync(profile);
            }else
            {
                profile = await ProfileService.AddProfileAsync(profile);
            }

            await logger.LogInformation("Profile Saved {Profile}", profile);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Profile {ProfleId} {Error}", _profileid, ex.Message);
            AddModuleMessage("Error Saving Profile", MessageType.Error);
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
