#pragma checksum "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Sites/Add.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a0a0d1dd2192ca2f5162ea5441828ca833ea99bf"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Modules.Admin.Sites
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class Add : ModuleBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 203 "/Users/cam/Desktop/oqtane.framework/Oqtane.Client/Modules/Admin/Sites/Add.razor"
       
    private List<Theme> _themeList;
    private List<ThemeControl> _themes = new List<ThemeControl>();
    private List<ThemeControl> _layouts = new List<ThemeControl>();
    private List<ThemeControl> _containers = new List<ThemeControl>();
    private List<SiteTemplate> _siteTemplates;
    private List<Tenant> _tenants;
    private string _tenantid = "-";

    private string _tenantname = string.Empty;
    private string _databasetype = "LocalDB";
    private string _server = "(LocalDb)\\MSSQLLocalDB";
    private string _database = "Oqtane-" + DateTime.UtcNow.ToString("yyyyMMddHHmm");
    private string _username = string.Empty;
    private string _password = string.Empty;
    private bool _integratedsecurity = true;
    private string _hostusername = Constants.HostUser;
    private string _hostpassword = string.Empty;

    private string _name = string.Empty;
    private string _urls = string.Empty;
    private string _themetype = "-";
    private string _layouttype = "-";
    private string _containertype = "-";
    private string _sitetemplatetype = "-";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override async Task OnInitializedAsync()
    {
        _tenants = await TenantService.GetTenantsAsync();
        _urls = PageState.Alias.Name;
        _themeList = await ThemeService.GetThemesAsync();
        _themes = ThemeService.GetThemeControls(_themeList);
        _siteTemplates = await SiteTemplateService.GetSiteTemplatesAsync();
    }

    private void TenantChanged(ChangeEventArgs e)
    {
        _tenantid = (string)e.Value;
        if (string.IsNullOrEmpty(_tenantname))
        {
            _tenantname = _name;
        }
        StateHasChanged();
    }

    private void SetIntegratedSecurity(ChangeEventArgs e)
    {
        if (Convert.ToBoolean((string)e.Value))
        {
            _integratedsecurity = true;
        }
        else
        {
            _integratedsecurity = false;
        }
        StateHasChanged();
    }

    private async void ThemeChanged(ChangeEventArgs e)
    {
        try
        {
            _themetype = (string)e.Value;
            if (_themetype != "-")
            {
                _layouts = ThemeService.GetLayoutControls(_themeList, _themetype);
                _containers = ThemeService.GetContainerControls(_themeList, _themetype);
            }
            else
            {
                _layouts = new List<ThemeControl>();
                _containers = new List<ThemeControl>();
            }
            _layouttype = "-";
            _containertype = "-";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Pane Layouts For Theme {ThemeType} {Error}", _themetype, ex.Message);
            AddModuleMessage("Error Loading Pane Layouts For Theme", MessageType.Error);
        }
    }

    private async Task SaveSite()
    {
        if (_tenantid != "-" && _name != string.Empty && _urls != string.Empty && _themetype != "-" && (_layouts.Count == 0 || _layouttype != "-") && _containertype != "-" && _sitetemplatetype != "-")
        {
            var duplicates = new List<string>();
            var aliases = await AliasService.GetAliasesAsync();
            foreach (string name in _urls.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                if (aliases.Exists(item => item.Name == name))
                {
                    duplicates.Add(name);
                }
            }

            if (duplicates.Count == 0)
            {
                InstallConfig config = new InstallConfig();

                if (_tenantid == "+")
                {
                    if (!string.IsNullOrEmpty(_tenantname) && _tenants.FirstOrDefault(item => item.Name == _tenantname) == null)
                    {
                        // validate host credentials
                        var user = new User();
                        user.SiteId = PageState.Site.SiteId;
                        user.Username = Constants.HostUser;
                        user.Password = _hostpassword;
                        user = await UserService.LoginUserAsync(user, false, false);
                        if (user.IsAuthenticated)
                        {
                            if (!string.IsNullOrEmpty(_server) && !string.IsNullOrEmpty(_database))
                            {
                                var connectionString = string.Empty;
                                if (_databasetype == "LocalDB")
                                {
                                    connectionString = "Data Source=" + _server + ";AttachDbFilename=|DataDirectory|\\" + _database + ".mdf;Initial Catalog=" + _database + ";Integrated Security=SSPI;";
                                }
                                else
                                {
                                    connectionString = "Data Source=" + _server + ";Initial Catalog=" + _database + ";";

                                    if (_integratedsecurity)
                                    {
                                        connectionString += "Integrated Security=SSPI;";
                                    }
                                    else
                                    {
                                        connectionString += "User ID=" + _username + ";Password=" + _password;
                                    }
                                }

                                config.ConnectionString = connectionString;
                                config.HostPassword = _hostpassword;
                                config.HostEmail = user.Email;
                                config.HostName = user.DisplayName;
                                config.TenantName = _tenantname;
                                config.IsNewTenant = true;
                            }
                            else
                            {
                                AddModuleMessage("You Must Specify A Server And Database", MessageType.Error);
                            }
                        }
                        else
                        {
                            AddModuleMessage("Invalid Host Password", MessageType.Error);
                        }
                    }
                    else
                    {
                        AddModuleMessage("Tenant Name Is Missing Or Already Exists", MessageType.Error);
                    }
                }
                else
                {
                    var tenant = _tenants.FirstOrDefault(item => item.TenantId == int.Parse(_tenantid));
                    if (tenant != null)
                    {
                        config.TenantName = tenant.Name;
                        config.ConnectionString= tenant.DBConnectionString;
                        config.IsNewTenant = false;
                    }
                }

                if  (!string.IsNullOrEmpty(config.TenantName))
                {
                    config.SiteName = _name;
                    config.Aliases = _urls.Replace("\n", ",");
                    config.DefaultTheme = _themetype;
                    config.DefaultLayout = _layouttype;
                    config.DefaultContainer = _containertype;
                    config.SiteTemplate = _sitetemplatetype;

                    ShowProgressIndicator();

                    var installation = await InstallationService.Install(config);
                    if (installation.Success)
                    {
                        var aliasname = config.Aliases.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)[0];
                        var uri = new Uri(NavigationManager.Uri);
                        NavigationManager.NavigateTo(uri.Scheme + "://" + aliasname, true);
                    }
                    else
                    {
                        await logger.LogError("Error Creating Site {Error}", installation.Message);
                        AddModuleMessage(installation.Message, MessageType.Error);
                    }
                }
            }
            else
            {
                AddModuleMessage(string.Join(", ", duplicates.ToArray()) + " Already Used For Another Site", MessageType.Warning);
            }
        }
        else
        {
            AddModuleMessage("You Must Provide A Tenant, Site Name, Alias, Default Theme/Container, And Site Template", MessageType.Warning);
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInstallationService InstallationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserService UserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISiteTemplateService SiteTemplateService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IThemeService ThemeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISiteService SiteService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAliasService AliasService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITenantService TenantService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
