#pragma checksum "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/Modules/Controls/PermissionGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8c1e144a805a9130879dbe4b0e07547f50d78395"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Modules.Controls
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class PermissionGrid : ModuleControlBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 77 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/Modules/Controls/PermissionGrid.razor"
       
    private string _permissionnames = string.Empty;
    private List<Role> _roles;
    private List<PermissionString> _permissions;
    private List<User> _users = new List<User>();
    private string _username = string.Empty;
    private string _message = string.Empty;

    [Parameter]
    public string EntityName { get; set; }

    [Parameter]
    public string PermissionNames { get; set; }

    [Parameter]
    public string Permissions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(PermissionNames))
        {
            _permissionnames = Shared.PermissionNames.View + "," + Shared.PermissionNames.Edit;
        }
        else
        {
            _permissionnames = PermissionNames;
        }

        _roles = await RoleService.GetRolesAsync(ModuleState.SiteId);
        _roles.Insert(0, new Role { Name = Constants.AllUsersRole });

        _permissions = new List<PermissionString>();

        foreach (string permissionname in _permissionnames.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        {
            // initialize with admin role
            _permissions.Add(new PermissionString { PermissionName = permissionname, Permissions = Constants.AdminRole });
        }

        if (!string.IsNullOrEmpty(Permissions))
        {
            // populate permissions
            foreach (PermissionString permissionstring in UserSecurity.GetPermissionStrings(Permissions))
            {
                if (_permissions.Find(item => item.PermissionName == permissionstring.PermissionName) != null)
                {
                    _permissions[_permissions.FindIndex(item => item.PermissionName == permissionstring.PermissionName)].Permissions = permissionstring.Permissions;
                }

                if (permissionstring.Permissions.Contains("["))
                {
                    foreach (string user in permissionstring.Permissions.Split(new char[] { '[' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        if (user.Contains("]"))
                        {
                            var userid = int.Parse(user.Substring(0, user.IndexOf("]")));
                            if (_users.Where(item => item.UserId == userid).FirstOrDefault() == null)
                            {
                                _users.Add(await UserService.GetUserAsync(userid, ModuleState.SiteId));
                            }
                        }
                    }
                }
            }
        }
    }

    private bool? GetPermissionValue(string permissions, string securityKey)
    {
        if ((";" + permissions + ";").Contains(";" + "!" + securityKey + ";"))
        {
            return false; // deny permission
        }
        else
        {
            if ((";" + permissions + ";").Contains(";" + securityKey + ";"))
            {
                return true; // grant permission
            }
            else
            {
                return null; // not specified
            }
        }
    }

    private bool GetPermissionDisabled(string roleName)
        => roleName == Constants.AdminRole
            ? true
            : false;

    private async Task AddUser()
    {
        if (_users.Where(item => item.Username == _username).FirstOrDefault() == null)
        {
            try
            {
                var user = await UserService.GetUserAsync(_username, ModuleState.SiteId);
                if (user != null)
                {
                    _users.Add(user);
                }
            }
            catch
            {
                _message = "Username Does Not Exist";
            }
        }

        _username = string.Empty;
    }

    private void PermissionChanged(bool? value, string permissionName, string securityId)
    {
        var selected = value;
        var permission = _permissions.Find(item => item.PermissionName == permissionName);
        if (permission != null)
        {
            var ids = permission.Permissions.Split(';').ToList();

            ids.Remove(securityId); // remove grant permission
            ids.Remove("!" + securityId); // remove deny permission

            switch (selected)
            {
                case true:
                    ids.Add(securityId); // add grant permission
                    break;
                case false:
                    ids.Add("!" + securityId); // add deny permission
                    break;
                case null:
                    break; // permission not specified
            }

            _permissions[_permissions.FindIndex(item => item.PermissionName == permissionName)].Permissions = string.Join(";", ids.ToArray());
        }
    }

    public string GetPermissions()
    {
        ValidatePermissions();
        return UserSecurity.SetPermissionStrings(_permissions);
    }

    private void ValidatePermissions()
    {
        PermissionString permission;
        for (int i = 0; i < _permissions.Count; i++)
        {
            permission = _permissions[i];
            List<string> ids = permission.Permissions.Split(';').ToList();
            ids.Remove("!" + Constants.AllUsersRole); // remove deny all users
            ids.Remove("!" + Constants.RegisteredRole); // remove deny registered users
            permission.Permissions = string.Join(";", ids.ToArray());
            _permissions[i] = permission;
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserService UserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRoleService RoleService { get; set; }
    }
}
#pragma warning restore 1591
