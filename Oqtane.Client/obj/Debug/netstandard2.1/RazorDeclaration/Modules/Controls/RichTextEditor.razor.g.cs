#pragma checksum "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/Modules/Controls/RichTextEditor.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e903ea359a484c55606303c937b7dd903b3b4be4"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Oqtane.Modules.Controls
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System;

#line default
#line hidden
#line 2 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Linq;

#line default
#line hidden
#line 3 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#line 4 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 7 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 8 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 9 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 11 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Models;

#line default
#line hidden
#line 12 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Modules;

#line default
#line hidden
#line 13 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Modules.Controls;

#line default
#line hidden
#line 14 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Providers;

#line default
#line hidden
#line 15 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Security;

#line default
#line hidden
#line 16 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Services;

#line default
#line hidden
#line 17 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Shared;

#line default
#line hidden
#line 18 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Themes;

#line default
#line hidden
#line 19 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Themes.Controls;

#line default
#line hidden
#line 20 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.UI;

#line default
#line hidden
#line 21 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/_Imports.razor"
using Oqtane.Enums;

#line default
#line hidden
    public partial class RichTextEditor : ModuleControlBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 81 "/Users/cam/Desktop/oqtane/oqtane-theme-test/Oqtane.Client/Modules/Controls/RichTextEditor.razor"
       
    private ElementReference _editorElement;
    private ElementReference _toolBar;
    private bool _filemanagervisible = false;
    private FileManager _fileManager;
    private string _content = string.Empty;
    private string _original = string.Empty;
    private string _message = string.Empty;

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public string Placeholder { get; set; } = "Enter Your Content...";

    // parameters only applicable to rich text editor
    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public string Theme { get; set; } = "snow";

    [Parameter]
    public string DebugLevel { get; set; } = "info";

    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Script, Bundle = "Quill", Url = "js/quill1.3.6.min.js" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "Quill", Url = "js/quill-blot-formatter.min.js" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "Quill", Url = "js/quill-interop.js" }
    };

    protected override void OnInitialized()
    {
        _content = Content; // raw HTML
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);

            var interop = new RichTextEditorInterop(JSRuntime);

            await interop.CreateEditor(
                _editorElement,
                _toolBar,
                ReadOnly,
                Placeholder,
                Theme,
                DebugLevel);

            await interop.LoadEditorContent(_editorElement, Content);

            // preserve a copy of the rich text content ( Quill sanitizes content so we need to retrieve it from the editor )
            _original = await interop.GetHtml(_editorElement);
        }
    }

    public void CloseFileManager()
    {
        _filemanagervisible = false;
        _message = string.Empty;
        StateHasChanged();
    }

    public async Task RefreshRichText()
    {
        var interop = new RichTextEditorInterop(JSRuntime);
        await interop.LoadEditorContent(_editorElement, _content);
    }

    public async Task RefreshRawHtml()
    {
        var interop = new RichTextEditorInterop(JSRuntime);
        _content = await interop.GetHtml(_editorElement);
        StateHasChanged();
    }

    public async Task<string> GetHtml()
    {
        // get rich text content
        var interop = new RichTextEditorInterop(JSRuntime);
        string content = await interop.GetHtml(_editorElement);

        if (_original != content)
        {
            // rich text content has changed - return it
            return content;
        }
        else
        {
            // return raw html content
            return _content;
        }
    }

    public async Task InsertImage()
    {
        if (_filemanagervisible)
        {
            var fileid = _fileManager.GetFileId();
            if (fileid != -1)
            {
                var interop = new RichTextEditorInterop(JSRuntime);
                await interop.InsertImage(_editorElement, ContentUrl(fileid));
                _filemanagervisible = false;
                _message = string.Empty;
            }
            else
            {
                _message = "<br /><div class=\"alert alert-warning\" role=\"alert\">You Must Select An Image To Insert</div>";
            }
        }
        else
        {
            _filemanagervisible = true;
            _message = string.Empty;
        }
        StateHasChanged();
    }

    // other rich text editor methods which can be used by developers
    public async Task<string> GetText()
    {
        var interop = new RichTextEditorInterop(JSRuntime);
        return await interop.GetText(_editorElement);
    }

    public async Task<string> GetContent()
    {
        var interop = new RichTextEditorInterop(JSRuntime);
        return await interop.GetContent(_editorElement);
    }

    public async Task EnableEditor(bool mode)
    {
        var interop = new RichTextEditorInterop(JSRuntime);
        await interop.EnableEditor(_editorElement, mode);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
